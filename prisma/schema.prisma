// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String      @id @default(cuid())
    firstName      String?
    lastName       String?
    email          String?     @unique
    username       String?     @unique @default("")
    passwordDigest String?
    emailVerified  DateTime?
    emailHash      String?     @unique
    image          String?
    bgColor        String?
    accounts       Account[]
    sessions       Session[]
    gameScores     GameScore[]

    updatedAt      DateTime        @updatedAt
    createdAt      DateTime        @default(now())
    userGroupRoles UserGroupRole[]
}

model UserGroup {
    id   String @id @default(cuid())
    name String

    updatedAt      DateTime        @updatedAt
    createdAt      DateTime        @default(now())
    // consider adding game relation here, if thinking about restricting access to games
    userGroupRoles UserGroupRole[]
}

model UserGroupRole {
    id               String          @id @default(cuid())
    name             String // admin, member, pending
    userGroup        UserGroup       @relation(fields: [userGroupId], references: [id])
    userGroupId      String
    user             User?           @relation(fields: [userId], references: [id])
    userId           String?
    userInvitation   UserInvitation? @relation(fields: [userInvitationId], references: [id])
    userInvitationId String?
}

model UserInvitation {
    id             String          @id @default(cuid())
    email          String
    userGroupRoles UserGroupRole[]
}

model Game {
    id          String      @id @default(cuid())
    name        String      @unique
    description String?
    gameScores  GameScore[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model GameScore {
    id         String   @id @default(cuid())
    identifier String
    score      Int
    data       Json
    comment    String?
    streak     Int
    date       DateTime
    game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}
